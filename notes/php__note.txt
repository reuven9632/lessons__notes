        //////////////////////////////////////////////////////////////////////////
        //  КОМЕНТАРИИ
//   первый способ коментария от C      одна строчка кода
/*   второй способ коментария от C++    много строк кода*/
#    третий способ коментария от Unix   одна строчка кода

        //////////////////////////////////////////////////////////////////////////
        //  вывод данных с помощью echo
<br/> - переносит на новую строку
<hr/> - создает горизонтальную линию на всю длину строки для разделения блоков
<r/>  - перемещает коретку в начало строки???
<?php echo $title;?>       или      <?=$title?>     -  как пример для обьявления заголовка страницы(примечание! переменная должна быть обьявленна перед использованием)
echo "textMessage <br/>"; //выводит данные на экран или куда либо 
echo "вывод переменной - $nameOfvariable"; //таким образом можно 
echo $string_1;          //выведет содержимое переменной $string_1
echo $string_1.$string_2;          //выведет содержимое переменной $string_1 + содержимое переменной. при ее выводе будет такой результат : содержимое первой строкисодержимое второй строки
                                   //   (.) обьеденяет строки как в JavaScript (+)
                                   //пример
                                   echo "hi "."Donna";              //   --->    hi Donna  
                                   echo $string_1." hi ".$string_2;   //   --->    содержимое первой строки hi содержимое второй строки   
echo "\"string "."string\"";        // бэкслэш \ отменяет восприятие последующего за ним символа (нужно для вывода ' " \
echo '"'."string "."string".'"';
                              


        //////////////////////////////////////////////////////////////////////////
        //  ПЕРЕМЕННЫЕ
//переменные в php могут принимать разное значение: набор инструкций, NULL, int, float, boolean ...при этом даю только имя не объявляя его спецификации
//при дальнейшем использовании переменной в дальнейшем перед ней также ставиться знак доллара $ как и при ее обьявлении
//переменные нельзя:    начинать имя с цифры                                $1name 
                        писать два слова через пробел                       $name name2
                        можно НО НЕЖЕЛАТЕЛЬНО начинать с подчеркивания      $_name

//правильно при обьявлении переменной :    как писать два и более слова     $nameNameName  or $name_name_name
                                            обычная с маленькой буквы       $name
                                            константа в верхнем регистре    $NAME                               
$nameOfvariable_1 = 1;
$nameOfvariable_2 = 1.5;
$nameOfvariable_3 = "some string";
$nameOfvariable_4 = true; //echo $nameOfvariable_4; выведет на экран 1 так как в php true это 1
$nameOfvariable_5 = true; //echo $nameOfvariable_5; выведет на экран пустую строку так как в php false это ничего или пустая строка
                    ///////////////////////
                    //  ОБЛАСТЬ ВИДИМОСТИ ПЕРЕМЕННЫХ
//перемнные обьявленные в функции являються ЛОКАЛЬНЫМИ и не видны за ее пределами
//перемнные обьявленные в функции как static являються ЛОКАЛЬНЫМИ но работают как ГЛОБАЛЬНЫЕ и не видны за ее пределами. НО переменная запоминает значение и при каждом вызове функции оно будет равно последнему назначенному значению "смотри ниже пример 4"
//перемнные обьявленные в основом коде являються ГЛОБОЛЬНЫМИ
        //обьявление глоальных переменных в функции с помощбю   global someVariable;        обьявляеться один раз в начале функции хатем просто пишем someVariable++;
        //обьявление глоальных переменных в функции с помощбю   $GLOBALS["someVariable"]    нужно постоянно использовать эту запись в функции каждый раз когда использую 
                //эту переменную(приемущество в том что можно использовать внутри функции переменную с таким же названием и все будет коректно работать так как глобальная и локальная 
                //переменные записываються внутри функции поразному "смотри пример ниже")
        //если хочу использовать глобальную переменную в функции, то нужно ее обьявить внутри функции как глобальную. пример:
        
        //прмиер 1
        $x = 5;
        function test(){
            $GLOBALS["x"] += 7;                    //обьявляю переменную х глобальной для дальнейшего использования в функции
            echo "переменная x = $GLOBALS['x']";   //выведет:    переменная x = 12
        }
        

        //пример 2
        //ВНИМАНИЕ!!! пример как не выведеться локальная переменная так как облась дейсвия ограниченна только рамками функции
        $x = 5;
        function test(){
            $y = 8;                                 //переменная которая не выведеться
            $x = 3;                                 //это локальная переменная которая будет задействованна только внутри функции несмотря на схожее название   $x
            $GLOBALS["x"] += 7;
            echo "переменная x = $x";               //выведет локальную переменную:    переменная x = 3
        }
        echo "переменная x = $x";                   //выведет:    переменная x = 12


        //пример 3
        $x = 5;
        function test(){
            global $x;                              //
            $x = 3;                                 //это локальная переменная которая будет задействованна только внутри функции несмотря на схожее название   $x
            $GLOBALS["x"] += 7;
            echo "переменная x = $x";               //выведет локальную переменную:    переменная x = 3
        }
        echo "переменная x = $x";    


        //пример 3
        function testStatic() {
            static $testStatic = 0;
            $testStatic++;
            echo $testStatic."<br/>";
        }
        for ($i = 0; $i < 10; $i++) {     //этот цикл выведет переменную static $testStatic от 0 до 9 так как область действий ее локальна(в пределах функции) но ее свойсва как у глобальной (запоминает последнее значение не обнуляясь выходя изи функции)
            testStatic();
        }
                    ///////////////////////
                    //  КОНСТАНТЫ
//константы в php записываються в верхнем регистре
    // обьявление константы :
define("NAME", 4.55);   //define - функция для обьявления констант, ("ИМЯ_КОНСТАНТЫ_В_ВЕРХНЕМ_РЕГИСТРЕ", "значение константы");
defined("NAME");   //define - функция для поиска констант по имени, ("ИМЯ_КОНСТАНТЫ_В_ВЕРХНЕМ_РЕГИСТРЕ"); если константа существует вернет true(1), если не существует false("")
echo PHP_VERSION;       //PHP_VERSION являеться константой php и при ее выводе будет такой результат : 5.4.40

        
        //////////////////////////////////////////////////////////////////////////
        //  МАТЕМАТИЧЕСКИЕ И ЛОГИЧЕСКИЕ ФУНКЦИИ
            //  МАТЕМАТИЧЕСКИЕ ФУНКЦИИ
    +, ++ (увеличить на 1), -, -- (уменьшить на 1), *, /, % (остаток от деления)
$x = 22;
$y = 11;
    $summ = $x + $y;
    $summ += $x;     //тоже самое что и $summ = $summ + $x;
    $summ++;         //увеличить на 1
$diff = $x - $y;
$diff -= $x;         //тоже самое что и $diff = $diff - $x;
$diff--;             //уменьшить на 1
    $mult = $x * $y;
    $mult *= $x;     //тоже самое что и $mult = $mult * $x;
$dil = $x / $y;
$dil /= $x;          //тоже самое что и $dil = $dil / $x;
    $ostatok = $x % $y;

            //  ЛОГИЧЕСКИЕ ФУНКЦИИ
                //$bool_1 вернет true или folse
$bool_1 = $x > $y;    // >  больше
$bool_1 = $x => $y;   // => больше или равно
$bool_1 = $x < $y;    // <  меньше
$bool_1 = $x <= $y;   // <= меньше или равно
$bool_1 = $x == $y;   // == равно
$bool_1 = $x === $y;  // === ОПЕРАТОР ЭКВИВАЛЕНТНОСТИ проверет если тивы переменных не совпадают то false, если совпадают то true
$bool_1 = $x != $y;   // ! не    != не равно, !> не больше и т. д.
$bool_1 = ($x < $y) || ($x == $y);   // || или( один из вариантов true или оба true )
$bool_1 = ($x < $y) ^ !($x == $y);  // ^  исключающее или ()
$bool_1 = ($x < $y) && ($x == $y);   // && и


            //////////////////////////////////////////////////////////////////////////
            //  ОПЕРАТОРЫ IF, IF ELSE   , switch\case(break) ++Bonus++
if ($x > 5 && $y < 10)
    echo "succes";


    if ($x > $y)
        echo "succes \$x > \$y";
    if else ($x < $y){
        echo "succes \$x < \$y";
        echo "if you have more then two rows of code need {}";
    }


if ($x > $y)
    echo "succes \$x > \$y";
if else ($x < $y){
    echo "succes \$x < \$y";
    echo "if you have more then two rows of code need {}";
}
else
    return "something else";


    $num = 12;
    switch ($num) {
        case "hello" : echo "это строковая переменная равнвя hello"; break;   //после case нужно ставить berak иначе с случае что условие выполнилось он продолжит выполнять следующие case даже если для них условие неверно
        case "12" : echo "это переменная равнвя 12"; break;
        case "5" : echo "это переменная равнвя 5"; break;
        case "7" : echo "это переменная равнвя 7"; break;
        default : echo "это переменная неизвестна"; break;        //default это как else, выполниться в случае что не сработал ни один case, в конце не нужно ставвить break            }
        //default необязателен
    }


//++Bonus++
$x == $y ? $string = "good" : $string = "not good";  //если $x равен $y то выполнить код $string = "good" иначе выполнить код $string = "not good"
//более длинная запись того же выражения
if ($x == $y)
    $string = "good";
else 
    $string = "not good"

            //////////////////////////////////////////////////////////////////////////
            //  ОПЕРАТОРЫ ЦИКЛА FOR, WHILE, DO WHILE
for ($i = 0; $i >= 40; $i++) {
    if ($i % 5 == 0) continue;      //continue - говорит циклу не продолжать выполнение кода а перескочить на следующий уровень
                                    //таким образом результаты с остатком 0 от 5 будет пропущен в цикле
    if ($i >=28) break;             //break полностью останавливает цикл и выходит из него, тоесть в данном примере все числа больше 28 обработанны не будут
    echo "номер цикла № $i <br/>";
}


    $j = 0;                         //для while нужно обьявлять переменную заранее
    while ($j <= 10) {
        echo "номер цикла while -  ";
        $j++;                       //для while увеличивать переменную нужно внутри цикла
    }


$z = 0;
do {
    echo "z равна = $z <br/>";
    $z++;
} while ($z < 5);                         //обязательно вконце ;



            //////////////////////////////////////////////////////////////////////////
            //  ФУНКЦИИ
functon nameFunction ($data) {                  //  имя переменной котороую мы передаем в функцию и имя переменной в функции совпадать не обязаны. пример: nameFunction ($summ)
    echo "полученный параметр функции - $data"; // выводит полученные данные на экран. пример: $summ = 5; nameFunction ($summ);   то вымедет  5
}


$x = mult (4, 8);
nameFunction ($x);                              // выводит полученные данные на экран. описание функции смотри чуть чуть выше


    function mult ($q, $w) {
        $mult = $q * $w;
        return $mult;                           //return может возвращать только один элемент/переменную
    }



            //////////////////////////////////////////////////////////////////////////
            //  МАССИВЫ 
                    ///////////////////////
                    //  ОДНОМЕРНЫЕ МАССИВЫ
$array = array ();                  //обьявление массива        переменной задаеться параметр что это массив   -   array (), пока что пустой
$array = array (3, 5, true, 7.5);   //обьявление массива        сразу задаю начальные параметры(элементы массива)
$array = array (1, 1.2, "some text", true);         //элементы массива могуть иметь различное расширение  int, float, boolean, string ...
$array[2] = "change 'some text'";                   //переопределяю значение ячейки 2 в массиве $array на "change 'some text'"
$array[] = "Add new element of array";              //добавление нового элемента таким образом добавит его в конце

echo $array[0];         //выведет первый элнмент массива        $имяМассива[порядковый_номер_элемента_начиная _с_0]
//  пример функции для вывода одномерного массива
for ($i = 0; $i < count($array); $i++)
    echo "элемент массива array № $i".$array[$i]."<br/>";
                    ///////////////////////
                    //  АССОЦИОТИВНЫЕ МАССИВЫ
$assocArray = array ("someKey" => "paramerer(int, string, boolean and ...)", "name" => "John", "age" => 20, "student" => true)  //обьявление ассоциотивного массива - переменной задаеться ключ "someKey", затем стрелочка =>, затем параметр соответствующий этому ключу
$assocArray["age"] = 25;                //переназначаю значение ключа "age" в массиве $assocArray на 25


function getAverage ($array) {          //создаю функцию которая будет брать среднее арифметическое из массива
    foreach ($array as$key => $value) { //описание foreach в разделе //ЗНАЧЕНИЕ СТАНДАРНЫХ ФУНКЦИЙ И ИХ ПРИМЕНЕНИЕ
        $summ += $value;
    }
    return $summ / count($array);
}
echo "среднее арифметическое(average) массива \$assocArray ".getAverage($assocArray);
                    ///////////////////////
                    //  ДВУМЕРНЫЕ МАССИВЫ
$array = array (array (12, 5.4, "string", true), array ("example"), array (4.5, false));//обьявление многомерного массива        переменной задаеться параметр что это массив   -   array (), а в него количество и многомерность массивов
                                                                                        //кол-во элементов в массиве может отличаться
echo $array [0][2];                     //вывод элемента двумерного массива. выведет  "string" 

for ($i = 0; $i < count($array); $i++){ //цикл для вывода двумерного массива
    for ($j = 0; $j < count($array[$i]); $j++)
        echo "array[$i][$j] = $array[$i][$j]";
    echo "<hr/>";
}




            //////////////////////////////////////////////////////////////////////////
            //  ПОДКЛЮЧЕНИЕ ФАЙЛОВ
require "php/nameOfFile.php";           //подключает файл,   ===>                                                                               но если его не найдет то выведет ошибку и останавливает выполнение кода
require_once "php/nameOfFile.php";      //проверит что файл не подключен ранее(дважды не подключит один и тот же файл в одном файле кода),   затем если его не найдет то выведет ошибку и останавливает выполнение кода
include "php/nameOfFile.php";           //подключает файл,   ===>                                                                               но если его не найдет то всеровно продолжает выполнение кода
include_once "php/nameOfFile.php";      //подключает файл только один раз(даже если в этом файле обьявленно несколько подключений этого файла), но если его не найдет то всеровно продолжает выполнение кода
            


            //////////////////////////////////////////////////////////////////////////
            //  ОБРАБОТКА ФОРМ
            //в качестве массива данных $_POST храниться массив с ключами в качестве тегов параметра name как ключ
index.html
    ...
    <form name="nameForm" action="form.php" method="POST">          //  action="form.php" -  указывает какой файл будет обрабатывать форму
        <label>имя:<label/><br/>
        <input type="text" name="nameInput" placeholder="Имя"><br/>
        <label>Email:<label/><br/>
        <input type="text" name="Email" placeholder="Email"><br/>
        <label>message:<label/><br/>
        <teextyarea  name="message" cols="40" rows="10"><br/>
        <input type="submit" name="done" value="готово">
    </form>

form.php
    ...
    if (iiset($_POST["done"])) {
        if ($_POST["name"] == "")
            echo "введите имя <a href=#>Исправать</a> ";
        else 
            header (location: index.php)
    }


            //////////////////////////////////////////////////////////////////////////
            //  ЗНАЧЕНИЕ СТАНДАРНЫХ ФУНКЦИЙ И ИХ ПРИМЕНЕНИЕ
count($array);    //возвращает сол-во элементов массива указанного в параметре
foreach ($array as $key => $value) //функция foreach ($array as $key => $value) принято записывать именно так несмотря на то что именна переменных можно задавать любые
                                   //foreach предназначенно как вывод цикла для ассоциотивного массива. ($array as $key => $value) читаеться как:
                                   //переберать масив $array as/как/по ключу $key =>/выберать из него его значение $value)
isset ($bottomPushed)              //проверяет если кнопка $bottomPushed нажата, возвращает true или false
header (location: index.php)       //переносит на новую страничку index.php
print_r ($_POST);                  //(используеться для разработчика)выведет  весь массив с его заголовками и т.д.


            




