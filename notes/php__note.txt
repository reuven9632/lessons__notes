        //////////////////////////////////////////////////////////////////////////
        //  РЕДИРЕКТ НА ДУГУЮ СТРАНИЦУ
header ("location: index.php");       //переносит на новую страничку index.php
exit;                                 //exit нужен для остановки выполнения кода этой страницы .php после перехода по ссылке редиректа

 
        //////////////////////////////////////////////////////////////////////////
        //  РАБОТА С ФАЙЛАМИ
fopen("nameFile.txt", "r+");              //создаёт или обращаться к файлу,
    // r  - открывает          файл для ЧТЕНИЯ,          помещает указатель В НАЧАЛО файла
    // r+ - открывает          файл для ЧТЕНИЯ и ЗАПИСИ, помещает указатель В НАЧАЛО файла, при записи будет перекрывать существующие символы
    // r+t- открывает/создает, файл для ЧТЕНИЯ и ЗАПИСИ, помещает указатель В НАЧАЛО файла, при записи будет перекрывать существующие символы   //возможно будут присутствовать знаки \n - новая строка, \t - табуляция     
    // w  - открывает/создает, файл для          ЗАПИСИ, помещает указатель В НАЧАЛО файла, и обрезает файл до нулевой длины,                
    // w+ - открывает/создает, файл для ЧТЕНИЯ и ЗАПИСИ, помещает указатель В НАЧАЛО файла, и обрезает файл до нулевой длины,                
    // a  - открывает/создает, файл для          ЗАПИСИ, помещает указатель В КОНЕЦ  файла,                                                  
    // a+ - открывает/создает, файл для ЧТЕНИЯ и ЗАПИСИ, помещает указатель В КОНЕЦ  файла,                                                 
    // a+t- открывает/создает, файл для ЧТЕНИЯ и ЗАПИСИ, помещает указатель В КОНЕЦ  файла,                                                     //возможно будут присутствовать знаки \n - новая строка, \t - табуляция                                  
    // a+b- открывает/создает, файл для ЧТЕНИЯ и ЗАПИСИ, помещает указатель В КОНЕЦ  файла,                                                   

fwrite($File, "Write something");     //записывает в файл  данные, fwrite(в какой файл, "что записать");
fread($File, 1);                      //считывает из файла данные, fread(в каком файле, по сколько символов считывать);
feof($File);                          //возвращает если указатель дошел до конца файла true, иначе false
fseek($File, 2);                      //fseek(ИМЯ ФАЙЛА, КУДА ПЕРЕДВИНУТЬ КАРЕТКУ);    как массив символы начинають исчесляться с нуля     
fclose($file);                        //в конце использования данных нужно обязательно закрывать файл


file_put_contents("nameFile.txt", "some text");//открывает/создает, файл для ЧТЕНИЯ и ЗАПИСИ, помещает указатель В НАЧАЛО файла, вводит/добавляет текст "some text" ПРИМЕЧАНИЕ: файл каждый раз создаеться заново
file_get_contents("nameFile.txt");             //открывает и вводит весь файл. пример: echo file_get_contents("nameFile.txt")
file_exists("someFile.txt");                   //если файл существует то true, иначе false
file_size("someFile.txt");                     //возвращает количество символов в файле . пример: 14
rename("nameFile_1.txt", "nameFile_2.txt");    //переименовывает файл nameFile_1.txt на nameFile_2.txt
unlink("nameFile.txt");                        //удляет файл

                        //  ПРИМЕРЫ
    //ПРИМЕР_1
$file = fopen("nameFile.txt", "r+t");
while (!feof($file)) {
    echo fread($file, 1);
}
fclose($file);

        //////////////////////////////////////////////////////////////////////////
        //  ОТПРАВЛЕНИЕ СООБЩЕНИЯ НА MAIL
//для коректной отправки сообщения нужно создать переменные для передачи формы отправки mail(..., ..., ..., ...)
//причем для mail.ru тему сообщения ($subject) нужно дополнительно кодировать используя кодировку "?=utf-8?B?".base64_encode($subject)."?="
//а также кодировать заголовок $headers таким образом как указанно на примере ниже
$to = "Din@gmail.com";
$from = "gango2005@gmail.com";
$subject = "Speak about...";                                //тема собщения
$subject = "?=utf-8?B?".base64_encode($subject)."?=";       //такое дополнительное кодирование нужно для коректного восприятия от mail.ru
$message = "Hi Din, i want speek whith you about..";
$headers = "From: $from\r\nReply-to: $from\r\nContent-type: text/plain; charset=utf-8\r\n";     //Content-type: - какой будет текст сообщения, например text/plain; - только обычный текст, text/html; -текст с возможностью использования записи в нем html тегов
mail($to, $subject, $message, $headers);                                                        //четвертый параметр $headers не обязателен, НО для коректной работы отправки ЖЕЛАТЕЛЬНО указывать его

        //////////////////////////////////////////////////////////////////////////
        //  $_COOKIE
setcookie ("NameCookie", "Значение");  //setcookie ("num", 10); or  setcookie ("someName", true);    созданная нами cookie будет храниться до конца сессии, а потом удалиться
                                        //третий параметр у setcookie() определяет время жизни cookie. пример setcookie ("summ", 22.34, time() + 3000); - моя cookie ,будет храниться 3000 сек
$_COOKIE["NameCookie"];                 //чтобы вызвать мою cookie нужно использовать глобальную переменную, а точнее массив $_COOKIE

        //////////////////////////////////////////////////////////////////////////
        //  ПРАВА ДОСТУПА
        |  owner |  group  |   user  |
------------------------------------------
read    |   1    |    1    |    1    |  4     owner 1*4+1*2+1*1=7
write   |   1    |    0    |    0    |  2     group 1*4+0*2+1*1=5
execute |   1    |    1    |    0    |  1     user  1*4+0*2+0*1=7    execute - выполнять файл
------------------------------------------
        |   7    |    5    |    4    | 

//устанавливая права доступа получаем число, в размерности которого понимаем какие права доступа у каждого пользователя
echo __FILE__;             //выведет путь к файлу
echo fileperms (__FILE__); //fileperms() выдает какие права доступа у файла, в качестве параметра путь к файлу(ВАЖНО: Windows и Mac не воспринимают права доступа и выдают рандомное число, это нужно для сервера который работает на Unix)
chmod(__FILE__, 0777);     //chmod() - меняет права доступа для файла по адресу __FILE__, указываем во втором параметре сначала ноль а затем наши цифры, к примеру: 0754

        //////////////////////////////////////////////////////////////////////////
        //  КОМЕНТАРИИ
//   первый способ коментария от C      одна строчка кода
/*   второй способ коментария от C++    много строк кода*/
#    третий способ коментария от Unix   одна строчка кода

        //////////////////////////////////////////////////////////////////////////
        //  вывод данных с помощью echo
<br/> - переносит на новую строку
"\n"  - перемещает коретку на новую строку (используеться для создания заголовков Email). пример: $string = "Первая строка\nВторая строка";
<hr/> - создает горизонтальную линию на всю длину строки для разделения блоков
"\r"  - перемещает коретку в начало строки (используеться для создания заголовков Email). пример: $string = "Первая строка\r\nВторая строка";

<?php echo $title;?>       или      <?=$title?>     -  как пример для обьявления заголовка страницы(примечание! переменная должна быть обьявленна перед использованием)
echo "textMessage <br/>"; //выводит данные на экран или куда либо 
echo "вывод переменной - $nameOfvariable"; //таким образом можно 
echo $string_1;          //выведет содержимое переменной $string_1
echo $string_1.$string_2;          //выведет содержимое переменной $string_1 + содержимое переменной. при ее выводе будет такой результат : содержимое первой строкисодержимое второй строки
                                   //   (.) обьеденяет строки как в JavaScript (+)
                                   //пример
                                   echo "hi "."Donna";              //   --->    hi Donna  
                                   echo $string_1." hi ".$string_2;   //   --->    содержимое первой строки hi содержимое второй строки   
echo "\"string "."string\"";        // бэкслэш \ отменяет восприятие последующего за ним символа (нужно для вывода ' " \
echo '"'."string "."string".'"';
                              


        //////////////////////////////////////////////////////////////////////////
        //  ПЕРЕМЕННЫЕ
//переменные в php могут принимать разное значение: набор инструкций, NULL, int, float, boolean ...при этом даю только имя не объявляя его спецификации
//при дальнейшем использовании переменной в дальнейшем перед ней также ставиться знак доллара $ как и при ее обьявлении
//переменные нельзя:    начинать имя с цифры                                $1name 
                        писать два слова через пробел                       $name name2
                        можно НО НЕЖЕЛАТЕЛЬНО начинать с подчеркивания      $_name

//правильно при обьявлении переменной :    как писать два и более слова     $nameNameName  or $name_name_name
                                            обычная с маленькой буквы       $name
                                            константа в верхнем регистре    $NAME                               
$nameOfvariable_1 = 1;
$nameOfvariable_2 = 1.5;
$nameOfvariable_3 = "some string";
$nameOfvariable_4 = true; //echo $nameOfvariable_4; выведет на экран 1 так как в php true это 1
$nameOfvariable_5 = true; //echo $nameOfvariable_5; выведет на экран пустую строку так как в php false это ничего или пустая строка
                    ///////////////////////
                    //  ОБЛАСТЬ ВИДИМОСТИ ПЕРЕМЕННЫХ
//перемнные обьявленные в функции являються ЛОКАЛЬНЫМИ и не видны за ее пределами
//перемнные обьявленные в функции как static являються ЛОКАЛЬНЫМИ но работают как ГЛОБАЛЬНЫЕ и не видны за ее пределами. НО переменная запоминает значение и при каждом вызове функции оно будет равно последнему назначенному значению "смотри ниже пример 4"
//перемнные обьявленные в основом коде являються ГЛОБОЛЬНЫМИ
        //обьявление глоальных переменных в функции с помощбю   global someVariable;        обьявляеться один раз в начале функции хатем просто пишем someVariable++;
        //обьявление глоальных переменных в функции с помощбю   $GLOBALS["someVariable"]    нужно постоянно использовать эту запись в функции каждый раз когда использую 
                //эту переменную(приемущество в том что можно использовать внутри функции переменную с таким же названием и все будет коректно работать так как глобальная и локальная 
                //переменные записываються внутри функции поразному "смотри пример ниже")
        //если хочу использовать глобальную переменную в функции, то нужно ее обьявить внутри функции как глобальную. пример:
        
        //прмиер 1
        $x = 5;
        function test(){
            $GLOBALS["x"] += 7;                    //обьявляю переменную х глобальной для дальнейшего использования в функции
            echo "переменная x = $GLOBALS['x']";   //выведет:    переменная x = 12
        }
        

        //пример 2
        //ВНИМАНИЕ!!! пример как не выведеться локальная переменная так как облась дейсвия ограниченна только рамками функции
        $x = 5;
        function test(){
            $y = 8;                                 //переменная которая не выведеться
            $x = 3;                                 //это локальная переменная которая будет задействованна только внутри функции несмотря на схожее название   $x
            $GLOBALS["x"] += 7;
            echo "переменная x = $x";               //выведет локальную переменную:    переменная x = 3
        }
        echo "переменная x = $x";                   //выведет:    переменная x = 12


        //пример 3
        $x = 5;
        function test(){
            global $x;                              //
            $x = 3;                                 //это локальная переменная которая будет задействованна только внутри функции несмотря на схожее название   $x
            $GLOBALS["x"] += 7;
            echo "переменная x = $x";               //выведет локальную переменную:    переменная x = 3
        }
        echo "переменная x = $x";    


        //пример 3
        function testStatic() {
            static $testStatic = 0;
            $testStatic++;
            echo $testStatic."<br/>";
        }
        for ($i = 0; $i < 10; $i++) {     //этот цикл выведет переменную static $testStatic от 0 до 9 так как область действий ее локальна(в пределах функции) но ее свойсва как у глобальной (запоминает последнее значение не обнуляясь выходя изи функции)
            testStatic();
        }
                    ///////////////////////
                    //  КОНСТАНТЫ
//константы в php записываються в верхнем регистре
    // обьявление константы :
define("NAME", 4.55);   //define - функция для обьявления констант, ("ИМЯ_КОНСТАНТЫ_В_ВЕРХНЕМ_РЕГИСТРЕ", "значение константы");
defined("NAME");        //define - функция для поиска констант по имени, ("ИМЯ_КОНСТАНТЫ_В_ВЕРХНЕМ_РЕГИСТРЕ"); если константа существует вернет true(1), если не существует false("")
    // КОНСТАНТЫ PHP
echo PHP_VERSION;       //PHP_VERSION являеться константой php и при ее выводе будет такой результат : 5.4.40
echo __FILE__;          //выводит путь к файлу
    // МАТЕМАТИЧЕСКИЕ КОНСТАНТЫ PHP
echo M_PI;              //выведет 3.14..….
echo E;                 //выведет 2.71..….        
        //////////////////////////////////////////////////////////////////////////
        //  МАТЕМАТИЧЕСКИЕ И ЛОГИЧЕСКИЕ ОПЕРАТОРЫ
            //  МАТЕМАТИЧЕСКИЕ ОПЕРАТОРЫ
    +, ++ (увеличить на 1), -, -- (уменьшить на 1), *, /, % (остаток от деления)
$x = 22;
$y = 11;
    $summ = $x + $y;
    $summ += $x;     //тоже самое что и $summ = $summ + $x;
    $summ++;         //увеличить на 1
$diff = $x - $y;
$diff -= $x;         //тоже самое что и $diff = $diff - $x;
$diff--;             //уменьшить на 1
    $mult = $x * $y;
    $mult *= $x;     //тоже самое что и $mult = $mult * $x;
$dil = $x / $y;
$dil /= $x;          //тоже самое что и $dil = $dil / $x;
    $ostatok = $x % $y;

            //  ЛОГИЧЕСКИЕ ФУНКЦИИ
                //$bool_1 вернет true или folse
$bool_1 = $x > $y;    // >  больше
$bool_1 = $x => $y;   // => больше или равно
$bool_1 = $x < $y;    // <  меньше
$bool_1 = $x <= $y;   // <= меньше или равно
$bool_1 = $x == $y;   // == равно
$bool_1 = $x === $y;  // === ОПЕРАТОР ЭКВИВАЛЕНТНОСТИ проверет если тивы переменных не совпадают то false, если совпадают то true
$bool_1 = $x != $y;   // ! не    != не равно, !> не больше и т. д.
$bool_1 = ($x < $y) || ($x == $y);   // || или( один из вариантов true или оба true )
$bool_1 = ($x < $y) ^ !($x == $y);  // ^  исключающее или ()
$bool_1 = ($x < $y) && ($x == $y);   // && и


            //////////////////////////////////////////////////////////////////////////
            //  ОПЕРАТОРЫ IF, IF ELSE   , switch\case(break) ++Bonus++
if ($x > 5 && $y < 10)
    echo "succes";


    if ($x > $y)
        echo "succes \$x > \$y";
    if else ($x < $y){
        echo "succes \$x < \$y";
        echo "if you have more then two rows of code need {}";
    }


if ($x > $y)
    echo "succes \$x > \$y";
if else ($x < $y){
    echo "succes \$x < \$y";
    echo "if you have more then two rows of code need {}";
}
else
    return "something else";


    $num = 12;
    switch ($num) {
        case "hello" : echo "это строковая переменная равнвя hello"; break;   //после case нужно ставить berak иначе с случае что условие выполнилось он продолжит выполнять следующие case даже если для них условие неверно
        case "12" : echo "это переменная равнвя 12"; break;
        case "5" : echo "это переменная равнвя 5"; break;
        case "7" : echo "это переменная равнвя 7"; break;
        default : echo "это переменная неизвестна"; break;        //default это как else, выполниться в случае что не сработал ни один case, в конце не нужно ставвить break            }
        //default необязателен
    }


//++Bonus++
$x == $y ? $string = "good" : $string = "not good";  //если $x равен $y то выполнить код $string = "good" иначе выполнить код $string = "not good"
//более длинная запись того же выражения
if ($x == $y)
    $string = "good";
else 
    $string = "not good"

            //////////////////////////////////////////////////////////////////////////
            //  ОПЕРАТОРЫ ЦИКЛА FOR, WHILE, DO WHILE
for ($i = 0; $i >= 40; $i++) {
    if ($i % 5 == 0) continue;      //continue - говорит циклу не продолжать выполнение кода а перескочить на следующий уровень
                                    //таким образом результаты с остатком 0 от 5 будет пропущен в цикле
    if ($i >=28) break;             //break полностью останавливает цикл и выходит из него, тоесть в данном примере все числа больше 28 обработанны не будут
    echo "номер цикла № $i <br/>";
}


    $j = 0;                         //для while нужно обьявлять переменную заранее
    while ($j <= 10) {
        echo "номер цикла while -  ";
        $j++;                       //для while увеличивать переменную нужно внутри цикла
    }


$z = 0;
do {
    echo "z равна = $z <br/>";
    $z++;
} while ($z < 5);                         //обязательно вконце ;



            //////////////////////////////////////////////////////////////////////////
            //  ФУНКЦИИ
functon nameFunction ($data) {                  //  имя переменной котороую мы передаем в функцию и имя переменной в функции совпадать не обязаны. пример: nameFunction ($summ)
    echo "полученный параметр функции - $data"; // выводит полученные данные на экран. пример: $summ = 5; nameFunction ($summ);   то вымедет  5
}


$x = mult (4, 8);
nameFunction ($x);                              // выводит полученные данные на экран. описание функции смотри чуть чуть выше


    function mult ($q, $w) {
        $mult = $q * $w;
        return $mult;                           //return может возвращать только один элемент/переменную
    }



            //////////////////////////////////////////////////////////////////////////
            //  МАССИВЫ 
                    ///////////////////////
                    //  ГЛОБАЛЬНЫЙ МАССИВ $_SERVER
// с помощью глобальной переменной $_SERVER можно узнать всю информацию о пользователе зашедшем на сайт, 
// узнать все возможные функции $_SERVER можно в функции echo phpinfo(); пролистав до раздела php variables
phpinfo();      //можно узнать всю информацию о версии php, а также смотреть различные значения, нужно для разработки
echo $_SERVER["REMOTE_ADDR"]; //выведет IP адрес пользователя зашедшего на сайт

                    ///////////////////////
                    //  ОДНОМЕРНЫЕ МАССИВЫ
$array = array ();                  //обьявление массива        переменной задаеться параметр что это массив   -   array (), пока что пустой
$array = array (3, 5, true, 7.5);   //обьявление массива        сразу задаю начальные параметры(элементы массива)
$array = array (1, 1.2, "some text", true);         //элементы массива могуть иметь различное расширение  int, float, boolean, string ...
$array[2] = "change 'some text'";                   //переопределяю значение ячейки 2 в массиве $array на "change 'some text'"
$array[] = "Add new element of array";              //добавление нового элемента таким образом добавит его в конце

echo $array[0];         //выведет первый элнмент массива        $имяМассива[порядковый_номер_элемента_начиная _с_0]
//  пример функции для вывода одномерного массива
for ($i = 0; $i < count($array); $i++)
    echo "элемент массива array № $i".$array[$i]."<br/>";
                    ///////////////////////
                    //  АССОЦИОТИВНЫЕ МАССИВЫ
$assocArray = array ("someKey" => "paramerer(int, string, boolean and ...)", "name" => "John", "age" => 20, "student" => true)  //обьявление ассоциотивного массива - переменной задаеться ключ "someKey", затем стрелочка =>, затем параметр соответствующий этому ключу
$assocArray["age"] = 25;                //переназначаю значение ключа "age" в массиве $assocArray на 25


function getAverage ($array) {          //создаю функцию которая будет брать среднее арифметическое из массива
    foreach ($array as$key => $value) { //описание foreach в разделе //ЗНАЧЕНИЕ СТАНДАРНЫХ ФУНКЦИЙ И ИХ ПРИМЕНЕНИЕ
        $summ += $value;
    }
    return $summ / count($array);
}
echo "среднее арифметическое(average) массива \$assocArray ".getAverage($assocArray);
                    ///////////////////////
                    //  ДВУМЕРНЫЕ МАССИВЫ
$array = array (array (12, 5.4, "string", true), array ("example"), array (4.5, false));//обьявление многомерного массива        переменной задаеться параметр что это массив   -   array (), а в него количество и многомерность массивов
                                                                                        //кол-во элементов в массиве может отличаться
echo $array [0][2];                     //вывод элемента двумерного массива. выведет  "string" 

for ($i = 0; $i < count($array); $i++){ //цикл для вывода двумерного массива
    for ($j = 0; $j < count($array[$i]); $j++)
        echo "array[$i][$j] = $array[$i][$j]";
    echo "<hr/>";
}




            //////////////////////////////////////////////////////////////////////////
            //  ПОДКЛЮЧЕНИЕ ФАЙЛОВ
require "php/nameOfFile.php";           //подключает файл,   ===>                                                                               но если его не найдет то выведет ошибку и останавливает выполнение кода
require_once "php/nameOfFile.php";      //проверит что файл не подключен ранее(дважды не подключит один и тот же файл в одном файле кода),   затем если его не найдет то выведет ошибку и останавливает выполнение кода
include "php/nameOfFile.php";           //подключает файл,   ===>                                                                               но если его не найдет то всеровно продолжает выполнение кода
include_once "php/nameOfFile.php";      //подключает файл только один раз(даже если в этом файле обьявленно несколько подключений этого файла), но если его не найдет то всеровно продолжает выполнение кода
            


            //////////////////////////////////////////////////////////////////////////
            //  ОБРАБОТКА ФОРМ
            //в качестве массива данных $_POST храниться массив с ключами в качестве тегов параметра name как ключ
index.html
    ...
    <form name="nameForm" action="form.php" method="POST">          //  action="form.php" -  указывает какой файл будет обрабатывать форму
        <label>имя:<label/><br/>
        <input type="text" name="nameInput" placeholder="Имя"><br/>
        <label>Email:<label/><br/>
        <input type="text" name="Email" placeholder="Email"><br/>
        <label>message:<label/><br/>
        <teextyarea  name="message" cols="40" rows="10"><br/>
        <input type="submit" name="done" value="готово">
    </form>

form.php
    ...
    if (isset($_POST["done"])) {
        if ($_POST["name"] == "")
            echo "введите имя <a href=#>Исправать</a> ";
        else 
            header (location: index.php)
    }


            //////////////////////////////////////////////////////////////////////////
            //  ЗНАЧЕНИЕ СТАНДАРНЫХ ФУНКЦИЙ И ИХ ПРИМЕНЕНИЕ
header ("location: index.php");       //переносит на новую страничку index.php
phpinfo();                         //можно узнать всю информацию о версии php, а также смотреть различные значения, нужно для разработки
                 //ФУНКЦИИ ДЛЯ РАБОТЫ С МАССИВАМИ
print_r ($_POST);                  //(используеться для разработчика)выведет  весь массив с его заголовками и т.д.
count($array);    //возвращает сол-во элементов массива указанного в параметре
foreach ($array as $key => $value) //функция foreach ($array as $key => $value) принято записывать именно так несмотря на то что именна переменных можно задавать любые
                                   //foreach предназначенно как вывод цикла для ассоциотивного массива. ($array as $key => $value) читаеться как:
                                   //переберать масив $array as/как/по ключу $key =>/выберать из него его значение $value)

//sort - сотрировка по возрастанию,               array([0]=>1[1]=>7[2]=>9[3]=>15[4]=>76)
//префикс r - reverse то есть в обратную сторону, array([0]=>76[1]=>15[2]=>9[3]=>7[4]=>1)
//префикс а - association для ассоциотивного массива, то есть сортирует, НО оставляет элементы привязанными к своим ключам   array([b]=>1[e]=>2[d]=>3[a]=>4[c]=>5),
//префикс k - key для ассоциотивного массива сортирует по ключам,        НО оставляет элементы привязанными к своим ключам   array([а]=>76[b]=>99[c]=>15[d]=>450[e]=>54)
sort($array);                      //сортирует элементы массива $array по возрастанию
rsort($array);                     //сортирует элементы массива $array по убыванию
asort($array);                     //сортирует элементы (ассоциотивного)массива $array по возрастанию,      ВАЖНО: то есть элементы сортируются и переносятся по возрастанию СО СВОИМИ КЛЮЧАМИ
arsort($array);                    //сортирует элементы (ассоциотивного)массива $array по убыванию,         ВАЖНО: то есть элементы сортируются и переносятся по убыванию СО СВОИМИ КЛЮЧАМИ
ksort($array);                     //сортирует элементы (ассоциотивного)массива $array по возрастанию ключа,ВАЖНО: то есть элементы сортируются и переносятся по возрастанию КЛЮЧА СО СВОИМИ ЭЛЕМЕНТАМИ
krsort($array);                    //сортирует элементы (ассоциотивного)массива $array по убыванию ключа,   ВАЖНО: то есть элементы сортируются и переносятся по убыванию КЛЮЧА СО СВОИМИ ЭЛЕМЕНТАМИ

shuffle($array);                   //рандомально перемешивает элементы массива
in_array(10, $array);              //in_array(какой элемент искать-10, где искать -$array);   ищет элемент массива по значению, если нашел true, иначе false
array_merge($array_1, $array_2);   //array_merge обьеденяет два массива и выдает один обьедененный, ВАЖНО: выданный массив нужно присвоить какому-то массиву     array_3 = array_merge($array_1, $array_2);
array_slice($array, $i, $j);       //удалит из массива $array - с начала кол-во символов $i, оставит количество символов $j и удалит все за ними  
array_slice($array, $i, -$j);      //удалит из массива $array - с начала кол-во символов $i, оставит все посредине и удалит кол-во символов $j с конца строки

unset ($someVariable)              //полностью удаляет переменную(не только значение а полностью ее существование, соответственно далее в коде можно создавать переменную с этим же именем так как она будет создана заново)
                                   //к примеру удалить элемент массива unset ($array[5]);        
isset ($bottomPushed)              //проверяет если кнопка $bottomPushed существует/нажата, возвращает true или false
                 //ФУНКЦИИ ДЛЯ РАБОТЫ СО СТРОКАМИ
$string = "searchSomeWord the test, see";
strlen($string);                     //вернёт кол-во символов в строке включая пробелы, в данном примере 28
strpos($string, "searchSomeWord");   //вернёт символ с которого нашло нашу цитату "searchSomeWord" в строке $string, в данном примере 0
strpos($string, "searchSomeWord", 5);//вернёт символ с которого нашло нашу цитату "searchSomeWord" в строке $string , а поиск начнет с 5-го символа(это третий параметр), в данном примере false так как ничего ненашло
strpos($string, "searchSomeWord");   //вернёт символ с которого нашло нашу цитату "searchSomeWord" в строке $string. ВАЖНО: если это первый символ то вернёт 0 так как отчёт идёт как в массиве с нуля
                                     //нужно проверять оператором эквивалентности так как если символ начинается с 0 и сделать проверку if($searchName == false) echo "слово ненайденно"; выдаст к примеру 
                                     //результат 0(слово найденно начинаеться с 0-го символа) воспринимает как проверку на пустую строку"" т. е. false и выдаст "слово не найденно"
                                     //а правильно использовать оператор эквивалентности:  if($searchName === false) echo "слово ненайденно"; 
strtolower($string);                 //переводит строку в нижний регистр
strtoupper($string);                 //переводит строку в верхний регистр
md5($password);                      //кодирует строку(обычно так кодируют пароль), переводит строку в уникальный набор цифр и букв закодированных по формуле
trim($string);                       //удаляет лишние пробелы из строки

str_replace("se", "TTT", $string);                                 //str_replace("что", "на что", где); результат "TTTarchSomeWord the test, TTTe"
str_replace(array("se", "ord"), array("QQQ", "12345"), $string);   //ВАЖНО размерность массивов должна соответствовать .результат "QQQarchSomeW12345 the test, QQQe"

//$string_2 = "<b>жирный шрифт</b>"; echo $string_2;   выведет текст "жирный шрифт" жирным шрифтом так как применен тег <в>. для того чтобы избежать подобного при вводе данных нужно использовать функцию htmlspecialchars();
htmlspecialchars ($string_2);        //функция для невосприимчивости к html тегам, при получении данных от пользователя к примеру

substr($string, $i);                 //удалит из строки $string - с начала кол-во символов $i
substr($string, $i, $j);             //удалит из строки $string - с начала кол-во символов $i, оставит количество символов $j и удалит все за ними
substr($string, $i, -(j);            //удалит из строки $string - с начала кол-во символов $i, оставит все посредине и удалит кол-во символов $j с конца строки

                 //функции проверяющие на соответствие определенного типа переменной int, float, string...
is_numeric($x);          //если переменная является числом(любым)      то вернёт true иначе вернёт false(примечание: даже если это строка содержащая число "15" или float то выдаст true)
is_integer($x);          //если переменная является числом(типа int)   то вернёт true иначе вернёт false(примечание: только int даст результа true)          
is_double($x);           //если переменная является дробным числом     то вернёт true иначе вернёт false
is_string($x);           //если переменная является строкой            то вернёт true иначе вернёт false
is_bool($x);             //если переменная является boolean            то вернёт true иначе вернёт false
is_scalar($x);           //если переменная является простой переменной то вернёт true иначе вернёт false(примечание: простая переменная любого типа а не сложная содержащая в себе функции или что либо иное)
is_null($x);             //если переменная является NULL(т.е. пустая)  то вернёт true иначе вернёт false
is_array($x);            //если переменная является массивом           то вернёт true иначе вернёт false

gettype($x);             //вернёт тип переменной, например: steing

                 //  математические функции
abs($x);                 //переменная $x по модулю. пример: $x=-5; echo abs($x); выведет 5             
round($x);               //округление переменной, после запятой 5 и больше к большему, иначе к меньшему
cell($x);                //округляет всегда к большему даже если 45.000001 будет 46
floor($x);               //округляет всегда к меньшему даже если 45.999999 будет 45
mt_rand(от, до);         //генерирует рандомальное число в пределах (от и до),(при не заданных параметрах в скобках генерирует от 0 до максимального числа в php)
min(19, 120, -50, 2);    //возвращает минимальное среди заданных, можно в качестве параметра задавать массив
max(3, 5, 68);           //возвращает максимальное среди заданных, можно в качестве параметра задавать массив


                 //  ФУНКЦИИ ВРЕМЕНИ
time ();                     //возвращает кол-во секунд               с 1 января 1970
microtime ();                //возвращает кол-во секунд  и милисекунд с 1 января 1970 (выводит милимекунды, секунды с 1 января 1970),если записать microtime(true); то выводит секунды,микросекунды
mktime($hour,$min,$sec,$month,$day,$year)//вернёт кол-во сек     с 1 января 1970
date ("Y-m-d H:i:s");                                           //выведет 2020-02-22 15:45:40 дату и время в этот момент. все кроме спец символов(букв) просто выводиться
date ("Y-m-d H:i:s", mktime($hour,$min,$sec,$month,$day,$year));//вторым параметром задаться кол-во секунд от mktime(...) и тогда выводит дату того дня который указан во втором параметре
getdate(mktime(...))         //вернёт массив содержащий дату и время для соответствующего кол-ва сек. пример: $arrayDate = getdate(mktime($hour,$min,$sec,$month,$day,$year));
checkdate($month,$day,$year);//вернёт true если такая дата существует, иначе false





